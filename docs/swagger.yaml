basePath: /
definitions:
  models.Task:
    properties:
      createdAt:
        type: string
      endTime:
        type: string
      id:
        type: integer
      startTime:
        type: string
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  models.UnfetchingData:
    properties:
      passportNumber:
        type: string
    type: object
  models.User:
    properties:
      address:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      passportNumber:
        type: string
      passportSeries:
        type: string
      patronymic:
        type: string
      surname:
        type: string
      tasks:
        items:
          $ref: '#/definitions/models.Task'
        type: array
      updatedAt:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for a time tracking application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Time Tracker API
  version: "1.0"
paths:
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: passportNumber
        in: body
        name: passportNumber
        required: true
        schema:
          $ref: '#/definitions/models.UnfetchingData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Create user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Update user
      tags:
      - users
  /users/{id}/tasks:
    get:
      consumes:
      - application/json
      description: Get user tasks
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get tasks
      tags:
      - users
  /users/tasks/{id}/start:
    post:
      consumes:
      - application/json
      description: Start user tasks
      parameters:
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
      summary: Start tasks
      tags:
      - tasks
  /users/tasks/{id}/stop:
    post:
      consumes:
      - application/json
      description: Stop user tasks
      parameters:
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
      summary: Stop tasks
      tags:
      - tasks
schemes:
- http
swagger: "2.0"
